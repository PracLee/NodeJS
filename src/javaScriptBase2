const { prototype } = require("events")

Hoisting - var
 - 변수의 선언만을 스코프의 맨위로끌어 올리는 것
 -> 가장 가까운 스코프에서 일치하는 변수에 hoisting진행
 => 코드의 어떤 식별자가 실제로 어떤 값이 가지는지를 결정하는것을 binding
 => javaScript의 binding은 lexical scope를 통해 진행
    * lexical scope : 안쪽에서 바깥쪽 변수에 접근이 가능
        ex1) 
        function foo(){
            var x = 'Hello!'
            console.log(x)  // 'Hello!'
        }

        console.log(x)      // 어디에 존재하는지 참조 할 수 없음, 반대경우는 가능

        ex2)
        var x = 'Hello'
        function foo(){
            console.log(x)  // Hello
        }
        console.log(x)      // Hello

        ex3)
        var x = 1
        function foo(){
            var x = 2
            console.log(x)  // 2
        }
        console.log(x)      // 2
        -> var는 block scoping을 무시함
        => let과 const는 block scoping

Closure
 - closure : function + enviroment
 - function이 생성될때마다 closure 생성
 - enviroment는 함수자신을 둘러싼, 접근할 수 있는 모든 스코프

 ex1)
    function and(x){                    // higher-order function : 다른 함수를 내포하는 함수
        return function print(y){
            return x + ' and ' + y
        }
    }

    const saltAnd = and('salt')
    console.log(saltAnd('pepper'))      // salt and pepper
    console.log(saltAnd('sugar'))       // salt and sugar

    -> and 함수로 만들어진 saltAnd의 closure는 함수 print와 환경 x -> salt 로 이루어짐
    => clsure는 higher-order function 을 만드는데 유용함

ex2)
    function and(x){                 
        return function print(y){
            return x + ' and ' + y
        }
    }

    const saltAnd = and('salt')         // salt binding
    console.log(saltAnd('pepper'))      // salt and pepper
    console.log(saltAnd('sugar'))       // salt and sugar

    const waterAnd = and('water')       // water binding
    console.log(warterAnd('juice'))     // water and juice

    -> closer는 function의 객체화라고 생각?

prototype
    상속을 구현하는 개념
